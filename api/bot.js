const { Telegraf } = require('telegraf');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
if (!process.env.BOT_TOKEN) {
  console.error('BOT_TOKEN is not set in environment variables');
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
let bot;
if (process.env.BOT_TOKEN) {
  bot = new Telegraf(process.env.BOT_TOKEN);
} else {
  console.warn('Bot not initialized: BOT_TOKEN missing');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç —Å–æ–∑–¥–∞–Ω)
if (bot) {
  // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.start(async (ctx) => {
    try {
      await ctx.reply(
        'ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω—Ç–∏–°–ø–∞–º –ë–æ—Ç!*\n\n' +
        '‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n' +
        'üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞\n' +
        'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n' +
        '/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥', 
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('Start command error:', error);
    }
  });

  bot.help(async (ctx) => {
    try {
      await ctx.reply(`
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üîπ *–ú–æ–¥–µ—Ä–∞—Ü–∏—è:*
/ban - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/mute - –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/warn - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üîπ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
/about - –û –±–æ—Ç–µ

*–°—Ç–∞—Ç—É—Å:* ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (Vercel Serverless)
*–í–µ—Ä—Å–∏—è:* 1.0.0
      `, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Help command error:', error);
    }
  });

  bot.command('stats', async (ctx) => {
    try {
      let chatInfo = 'N/A';
      try {
        chatInfo = await ctx.getChatMembersCount();
      } catch (e) {
        console.log('Could not get chat members count:', e.message);
      }
      
      await ctx.reply(`
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:*

üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chatInfo}
ü§ñ –ë–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üì° –†–µ–∂–∏–º: Webhook (Vercel)
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime() / 60)} –º–∏–Ω
üåç –†–µ–≥–∏–æ–Ω: ${process.env.VERCEL_REGION || 'Auto'}

üõ°Ô∏è *–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞*
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}
      `, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Stats command error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });

  bot.command('status', async (ctx) => {
    try {
      await ctx.reply(`
üü¢ *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ONLINE*

‚úÖ Webhook –∞–∫—Ç–∏–≤–µ–Ω
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
‚úÖ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ê–Ω—Ç–∏–°–ø–∞–º –≤–∫–ª—é—á–µ–Ω

üïê ${new Date().toLocaleString('ru-RU')}
      `, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Status command error:', error);
    }
  });

  bot.command('rules', async (ctx) => {
    try {
      await ctx.reply(`
üìã *–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:*

1Ô∏è‚É£ –ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã
2Ô∏è‚É£ –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
3Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω —Ñ–ª—É–¥
4Ô∏è‚É£ –ë–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π
5Ô∏è‚É£ –ü–æ —Ç–µ–º–µ —á–∞—Ç–∞

‚ö†Ô∏è *–ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:*
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞

ü§ñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
      `, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Rules command error:', error);
    }
  });

  bot.command('about', async (ctx) => {
    try {
      await ctx.reply(`
ü§ñ *–ê–Ω—Ç–∏–°–ø–∞–º –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ë–æ—Ç*

üîπ *–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–∞—Ç–∞
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üîπ *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*
‚Ä¢ Node.js + Telegraf
‚Ä¢ Vercel Serverless
‚Ä¢ SQLite Database
‚Ä¢ AI –º–æ–¥–µ—Ä–∞—Ü–∏—è

üîπ *–í–µ—Ä—Å–∏—è:* 1.0.0
üîπ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–µ–Ω 24/7

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–æ–≤
      `, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('About command error:', error);
    }
  });

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  bot.on('new_chat_members', async (ctx) => {
    try {
      const newMembers = ctx.message.new_chat_members;
      for (const member of newMembers) {
        if (!member.is_bot) {
          await ctx.reply(
            `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${member.first_name}!*\n\n` +
            `üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ!\n\n` +
            `üìã –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /rules\n` +
            `‚ùì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help\n\n` +
            `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä`,
            { parse_mode: 'Markdown' }
          );
        }
      }
    } catch (error) {
      console.error('Error greeting new members:', error);
    }
  });

  // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–∞
  bot.on('text', async (ctx) => {
    try {
      const message = ctx.message.text.toLowerCase();
      const spamWords = ['—Ä–µ–∫–ª–∞–º–∞', '–∫—É–ø–∏', '–ø—Ä–æ–¥–∞–º', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–±–∏—Ç–∫–æ–∏–Ω', '–∫—Ä–∏–ø—Ç–∞'];
      
      const isSpam = spamWords.some(word => message.includes(word));
      
      if (isSpam && ctx.chat.type !== 'private') {
        await ctx.deleteMessage();
        await ctx.reply(
          `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ (–ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º)\n` +
          `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${ctx.from.username || ctx.from.first_name}`,
          { reply_to_message_id: ctx.message.message_id }
        );
      }
    } catch (error) {
      console.error('Anti-spam error:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    if (ctx && ctx.reply) {
      try {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (e) {
        console.error('Error sending error message:', e);
      }
    }
  });
}

module.exports = async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!process.env.BOT_TOKEN) {
      console.error('BOT_TOKEN not configured');
      return res.status(500).json({ 
        error: 'Configuration error',
        message: 'BOT_TOKEN not configured',
        timestamp: new Date().toISOString()
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω
    if (!bot) {
      console.error('Bot not initialized');
      return res.status(500).json({ 
        error: 'Bot initialization error',
        message: 'Bot not properly initialized',
        timestamp: new Date().toISOString()
      });
    }

    if (req.method === 'POST') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
      console.log('Received webhook request:', {
        headers: req.headers,
        bodyKeys: Object.keys(req.body || {}),
        timestamp: new Date().toISOString()
      });
      
      await bot.handleUpdate(req.body);
      res.status(200).json({ 
        ok: true,
        timestamp: new Date().toISOString() 
      });
    } else {
      // GET –∑–∞–ø—Ä–æ—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
      const botInfo = {
        status: 'ok',
        message: 'Telegram Bot Webhook is ready',
        method: req.method,
        timestamp: new Date().toISOString(),
        config: {
          hasToken: !!process.env.BOT_TOKEN,
          nodeEnv: process.env.NODE_ENV || 'development',
          botInitialized: !!bot,
          region: process.env.VERCEL_REGION || 'unknown'
        },
        endpoints: {
          webhook: '/bot (POST)',
          status: '/bot (GET)',
          health: '/health'
        }
      };
      
      res.status(200).json(botInfo);
    }
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message,
      timestamp: new Date().toISOString(),
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}; 