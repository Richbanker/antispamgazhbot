const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const Database = require('better-sqlite3');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
if (!process.env.BOT_TOKEN) {
  console.error('BOT_TOKEN is not set in environment variables');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database('/tmp/database.sqlite');

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
db.prepare(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY,
  username TEXT,
  role TEXT DEFAULT 'newbie',
  join_date TEXT,
  messages_count INTEGER DEFAULT 0
)`).run();

db.prepare(`CREATE TABLE IF NOT EXISTS warnings (
  user_id INTEGER PRIMARY KEY,
  count INTEGER DEFAULT 0,
  last_warn TEXT
)`).run();

db.prepare(`CREATE TABLE IF NOT EXISTS moderation_logs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  timestamp TEXT NOT NULL,
  action TEXT NOT NULL,
  user_id INTEGER NOT NULL,
  username TEXT,
  chat_id INTEGER NOT NULL,
  reason TEXT NOT NULL,
  message_text TEXT,
  ai_confidence REAL
)`).run();

// –°–µ—Ä–≤–∏—Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
class BadWordsService {
  constructor() {
    this.badWords = [
      "—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞", "–∫—Ä–∏–ø—Ç–∞", "–∫–∞–∑–∏–Ω–æ", "xxx", "–ø–æ—Ä–Ω–æ", 
      "18+", "—Å–µ–∫—Å", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–ø–∏—Ä–∞–º–∏–¥–∞", "–±–∏—Ç–∫–æ–∏–Ω",
      "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—Ñ–æ—Ä–µ–∫—Å", "–º–ª–º", "—Ç–æ–≤–∞—Ä", "—Å–∫–∏–¥–∫–∞"
    ];
  }

  checkMessage(text) {
    const lowerText = text.toLowerCase();
    for (const badWord of this.badWords) {
      if (lowerText.includes(badWord.toLowerCase())) {
        return { found: true, word: badWord };
      }
    }
    return { found: false };
  }

  getAllWords() {
    return [...this.badWords];
  }

  addWord(word) {
    const normalizedWord = word.toLowerCase().trim();
    if (!normalizedWord || this.badWords.some(w => w.toLowerCase() === normalizedWord)) {
      return false;
    }
    this.badWords.push(normalizedWord);
    return true;
  }

  removeWord(word) {
    const normalizedWord = word.toLowerCase().trim();
    const initialLength = this.badWords.length;
    this.badWords = this.badWords.filter(w => w.toLowerCase() !== normalizedWord);
    return this.badWords.length < initialLength;
  }

  getCount() {
    return this.badWords.length;
  }
}

const badWordsService = new BadWordsService();

// –°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const moderationLogService = {
  async logAction(action, userId, chatId, reason, options = {}) {
    const timestamp = new Date().toISOString();
    try {
      db.prepare(`
        INSERT INTO moderation_logs 
        (timestamp, action, user_id, username, chat_id, reason, message_text, ai_confidence)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `).run(
        timestamp,
        action,
        userId,
        options.username || null,
        chatId,
        reason,
        options.messageText || null,
        options.aiConfidence || null
      );
    } catch (error) {
      console.error('Error saving moderation log:', error);
    }
    console.log(`üìù Moderation log: ${action} - User ${userId} (${options.username || 'unknown'}) - ${reason}`);
  },

  async getRecentLogs(limit = 10, chatId) {
    try {
      let query = `
        SELECT id, timestamp, action, user_id as userId, username, chat_id as chatId, 
               reason, message_text as messageText, ai_confidence as aiConfidence
        FROM moderation_logs
      `;
      
      const params = [];
      
      if (chatId) {
        query += ' WHERE chat_id = ?';
        params.push(chatId);
      }
      
      query += ' ORDER BY timestamp DESC LIMIT ?';
      params.push(limit);

      return db.prepare(query).all(...params);
    } catch (error) {
      console.error('Error fetching moderation logs:', error);
      return [];
    }
  }
};

// –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userService = {
  async ensureUser(userId, username) {
    const user = db.prepare('SELECT * FROM users WHERE id = ?').get(userId);
    if (!user) {
      db.prepare('INSERT INTO users (id, username, role, join_date, messages_count) VALUES (?, ?, ?, ?, 0)')
        .run(userId, username, 'newbie', new Date().toISOString());
    }
  },

  async addWarning(userId) {
    const now = new Date().toISOString();
    const warn = db.prepare('SELECT * FROM warnings WHERE user_id = ?').get(userId);
    if (!warn) {
      db.prepare('INSERT INTO warnings (user_id, count, last_warn) VALUES (?, 1, ?)').run(userId, now);
    } else {
      db.prepare('UPDATE warnings SET count = count + 1, last_warn = ? WHERE user_id = ?').run(now, userId);
    }
  },

  async getWarnings(userId) {
    const result = db.prepare('SELECT count, last_warn FROM warnings WHERE user_id = ?').get(userId);
    return result || { count: 0, last_warn: null };
  }
};

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
let bot;
if (process.env.BOT_TOKEN) {
  bot = new Telegraf(process.env.BOT_TOKEN);
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  const config = {
    AI_MODERATION: process.env.AI_MODERATION === 'true',
    MAX_WARNINGS: parseInt(process.env.MAX_WARNINGS || '3'),
    MUTE_DURATION: parseInt(process.env.MUTE_DURATION || '600')
  };

  console.log(`üõ°Ô∏è Setting up AI Moderation (AI: ${config.AI_MODERATION ? 'ON' : 'OFF'})`);
  console.log(`üìã Bad words loaded: ${badWordsService.getCount()} words`);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
  async function isAdmin(ctx) {
    try {
      if (!ctx.from || !ctx.chat) return false;
      const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
      return ['creator', 'administrator'].includes(member.status);
    } catch (error) {
      return false;
    }
  }

  // –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò
  bot.command('badwords', async (ctx) => {
    try {
      if (!(await isAdmin(ctx))) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      const action = args[0];

      switch (action) {
        case 'list':
          const words = badWordsService.getAllWords();
          if (words.length === 0) {
            await ctx.reply('üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.');
            return;
          }
          
          const wordsList = words.slice(0, 30)
            .map((word, index) => `${index + 1}. <code>${word}</code>`)
            .join('\n');
          
          await ctx.reply(
            `üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞</b>\n\n${wordsList}\n\n<b>–í—Å–µ–≥–æ:</b> ${words.length} —Å–ª–æ–≤`,
            { parse_mode: 'HTML' }
          );
          break;
        
        case 'add':
          const wordToAdd = args.slice(1).join(' ').trim();
          if (!wordToAdd) {
            await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: <code>/badwords add —Å–ø–∞–º</code>', { parse_mode: 'HTML' });
            return;
          }
          
          const added = badWordsService.addWord(wordToAdd);
          if (added) {
            await ctx.reply(
              `‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\nüö´ –ù–æ–≤–æ–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <code>${wordToAdd}</code>\nüìä –í—Å–µ–≥–æ —Å–ª–æ–≤: ${badWordsService.getCount()}`,
              { parse_mode: 'HTML' }
            );
            
            await moderationLogService.logAction(
              'badword_added',
              ctx.from.id,
              ctx.chat.id,
              `–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${wordToAdd}"`,
              { username: ctx.from.username }
            );
          } else {
            await ctx.reply(
              `‚ö†Ô∏è <b>–°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!</b>\n\nüö´ –°–ª–æ–≤–æ "<code>${wordToAdd}</code>" —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.`,
              { parse_mode: 'HTML' }
            );
          }
          break;
        
        case 'remove':
          const wordToRemove = args.slice(1).join(' ').trim();
          if (!wordToRemove) {
            await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: <code>/badwords remove —Å–ø–∞–º</code>', { parse_mode: 'HTML' });
            return;
          }
          
          const removed = badWordsService.removeWord(wordToRemove);
          if (removed) {
            await ctx.reply(
              `‚úÖ <b>–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!</b>\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <code>${wordToRemove}</code>\nüìä –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: ${badWordsService.getCount()}`,
              { parse_mode: 'HTML' }
            );
            
            await moderationLogService.logAction(
              'badword_removed',
              ctx.from.id,
              ctx.chat.id,
              `–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${wordToRemove}"`,
              { username: ctx.from.username }
            );
          } else {
            await ctx.reply(
              `‚ö†Ô∏è <b>–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n\nüîç –°–ª–æ–≤–æ "<code>${wordToRemove}</code>" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/badwords list</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.`,
              { parse_mode: 'HTML' }
            );
          }
          break;
        
        default:
          await ctx.reply(
            `üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n` +
            `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
            `‚Ä¢ <code>/badwords list</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤\n` +
            `‚Ä¢ <code>/badwords add [—Å–ª–æ–≤–æ]</code> - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n` +
            `‚Ä¢ <code>/badwords remove [—Å–ª–æ–≤–æ]</code> - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n` +
            `<b>–í—Å–µ–≥–æ —Å–ª–æ–≤:</b> ${badWordsService.getCount()}`,
            { parse_mode: 'HTML' }
          );
          break;
      }
    } catch (error) {
      console.error('Error in badwords command:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ª–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  bot.command('modlog', async (ctx) => {
    try {
      if (!(await isAdmin(ctx))) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      const limit = Math.min(parseInt(args[0]) || 10, 20);
      const chatId = ctx.chat?.id;
      
      if (!chatId) return;

      const logs = await moderationLogService.getRecentLogs(limit, chatId);
      
      if (logs.length === 0) {
        await ctx.reply('üìã –õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç—ã.');
        return;
      }

      let message = `üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${logs.length} –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n`;

      for (const log of logs) {
        const date = new Date(log.timestamp).toLocaleString('ru-RU');
        const username = log.username ? `@${log.username}` : `ID:${log.userId}`;
        
        const actionEmoji = {
          'message_deleted': 'üóëÔ∏è',
          'user_muted': 'üîá',
          'badword_added': '‚ûï',
          'badword_removed': '‚ûñ'
        }[log.action] || 'üìù';
        
        message += `${actionEmoji} <b>${log.action}</b>\n`;
        message += `üë§ ${username}\n`;
        message += `üìÖ ${date}\n`;
        message += `üìù ${log.reason}\n\n`;
      }

      message += `üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> <code>/modlog [—á–∏—Å–ª–æ]</code> <i>–¥–ª—è –ø–æ–∫–∞–∑–∞ –¥—Ä—É–≥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π</i>`;

      await ctx.reply(message, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('Error in modlog command:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.');
    }
  });

  // –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
  bot.command('test_moderation', async (ctx) => {
    await ctx.reply('‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –°–∏—Å—Ç–µ–º–∞ v2.0.0 –∞–∫—Ç–∏–≤–Ω–∞.');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
  bot.on('text', async (ctx) => {
    try {
      const text = ctx.message.text;
      if (!text) return;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      if (await isAdmin(ctx)) return;

      const userId = ctx.from?.id;
      const username = ctx.from?.username || `user_${userId}`;
      const chatId = ctx.chat?.id;

      if (!userId || !chatId) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      const badWordCheck = badWordsService.checkMessage(text);
      if (badWordCheck.found) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.deleteMessage();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await userService.addWarning(userId);
        const warnings = await userService.getWarnings(userId);

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await moderationLogService.logAction(
          'message_deleted',
          userId,
          chatId,
          `–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${badWordCheck.word}"`,
          { username, messageText: text }
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if (warnings.count >= config.MAX_WARNINGS) {
          // –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            const until = Math.floor(Date.now() / 1000) + config.MUTE_DURATION;
            
            await ctx.telegram.restrictChatMember(chatId, userId, {
              permissions: {
                can_send_messages: false,
                can_send_audios: false,
                can_send_documents: false,
                can_send_photos: false,
                can_send_videos: false,
                can_send_video_notes: false,
                can_send_voice_notes: false,
                can_send_polls: false,
                can_send_other_messages: false,
                can_add_web_page_previews: false,
                can_change_info: false,
                can_invite_users: false,
                can_pin_messages: false,
                can_manage_topics: false
              },
              until_date: until
            });

            await moderationLogService.logAction(
              'user_muted',
              userId,
              chatId,
              `–ó–∞–≥–ª—É—à–µ–Ω –Ω–∞ ${config.MUTE_DURATION} —Å–µ–∫—É–Ω–¥ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)`,
              { username }
            );
            
            await ctx.reply(
              `üîá <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ ${Math.round(config.MUTE_DURATION / 60)} –º–∏–Ω—É—Ç</b>\n` +
              `üìä –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.count}/${config.MAX_WARNINGS}\n` +
              `üö´ –ü—Ä–∏—á–∏–Ω–∞: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${badWordCheck.word}"`,
              { parse_mode: 'HTML' }
            );
          } catch (error) {
            console.error('Error muting user:', error);
          }
        } else {
          // –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
          await ctx.reply(
            `üö´ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n` +
            `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.count}/${config.MAX_WARNINGS}\n` +
            `üìù –ü—Ä–∏—á–∏–Ω–∞: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${badWordCheck.word}"\n\n` +
            `<i>–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ ${config.MAX_WARNINGS} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–µ–Ω.</i>`,
            { parse_mode: 'HTML' }
          );
        }

        return;
      }
    } catch (error) {
      console.error('Error in text message handler:', error);
    }
  });

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.start(async (ctx) => {
    try {
      await ctx.reply(
        'ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω—Ç–∏–°–ø–∞–º –ë–æ—Ç v2.0!*\n\n' +
        '‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n' +
        'üõ°Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n' +
        'üìä AI-–∞–Ω—Ç–∏—Å–ø–∞–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n' +
        'üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n\n' +
        '/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥', 
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      console.error('Start command error:', error);
    }
  });

  bot.help(async (ctx) => {
    try {
      await ctx.reply(`
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

üîπ *–û—Å–Ω–æ–≤–Ω—ã–µ:*
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üîπ *–ú–æ–¥–µ—Ä–∞—Ü–∏—è (–∞–¥–º–∏–Ω—ã):*
/badwords - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
/badwords list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
/badwords add <—Å–ª–æ–≤–æ> - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
/badwords remove <—Å–ª–æ–≤–æ> - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
/modlog - –õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/test_moderation - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã v2.0

üîπ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
/about - –û –±–æ—Ç–µ

*–°—Ç–∞—Ç—É—Å:* ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (Vercel v2.0)
*–í–µ—Ä—Å–∏—è:* 2.0.0 - –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      `, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('Help command error:', error);
    }
  });

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  bot.on('new_chat_members', async (ctx) => {
    try {
      const newMembers = ctx.message.new_chat_members;
      for (const member of newMembers) {
        if (!member.is_bot) {
          await userService.ensureUser(member.id, member.username || '');
          
          await ctx.reply(
            `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${member.first_name}!*\n\n` +
            `üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ!\n\n` +
            `üìã –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: /rules\n` +
            `‚ùì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help\n\n` +
            `üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ v2.0 –∞–∫—Ç–∏–≤–Ω–∞\n` +
            `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòä`,
            { parse_mode: 'Markdown' }
          );
        }
      }
    } catch (error) {
      console.error('Error greeting new members:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    if (ctx && ctx.reply) {
      try {
        ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (e) {
        console.error('Error sending error message:', e);
      }
    }
  });

} else {
  console.warn('Bot not initialized: BOT_TOKEN missing');
}

module.exports = async (req, res) => {
  try {
    if (!process.env.BOT_TOKEN) {
      console.error('BOT_TOKEN not configured');
      return res.status(500).json({ 
        error: 'Configuration error',
        message: 'BOT_TOKEN not configured',
        timestamp: new Date().toISOString()
      });
    }

    if (!bot) {
      console.error('Bot not initialized');
      return res.status(500).json({ 
        error: 'Bot initialization error',
        message: 'Bot not properly initialized',
        timestamp: new Date().toISOString()
      });
    }

    if (req.method === 'POST') {
      console.log('Received webhook request:', {
        timestamp: new Date().toISOString()
      });
      
      await bot.handleUpdate(req.body);
      res.status(200).json({ 
        ok: true,
        timestamp: new Date().toISOString() 
      });
    } else {
      const botInfo = {
        status: 'ok',
        message: 'Telegram Bot Webhook v2.0 is ready',
        method: req.method,
        timestamp: new Date().toISOString(),
        version: '2.0.0',
        features: [
          'AI Moderation System',
          'Bad Words Management',
          'Moderation Logging',
          'Admin Commands',
          'Auto Mute/Ban System'
        ],
        config: {
          hasToken: !!process.env.BOT_TOKEN,
          aiModeration: process.env.AI_MODERATION === 'true',
          maxWarnings: process.env.MAX_WARNINGS || '3',
          muteDuration: process.env.MUTE_DURATION || '600',
          badWordsCount: badWordsService.getCount()
        }
      };
      
      res.status(200).json(botInfo);
    }
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}; 