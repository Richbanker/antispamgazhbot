const { Telegraf } = require('telegraf');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
if (!process.env.BOT_TOKEN) {
  console.error('BOT_TOKEN is not set in environment variables');
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.start(async (ctx) => {
  await ctx.reply('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥');
});

bot.help(async (ctx) => {
  await ctx.reply(`
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

üëã /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞

*–°—Ç–∞—Ç—É—Å:* ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω (Vercel)
  `, { parse_mode: 'Markdown' });
});

bot.command('stats', async (ctx) => {
  const chatInfo = await ctx.getChatMembersCount();
  
  await ctx.reply(`
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:*

üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chatInfo}
ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ‚úÖ
üì° –†–µ–∂–∏–º: Webhook (Vercel)
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime() / 60)} –º–∏–Ω

üõ°Ô∏è *–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞*
  `, { parse_mode: 'Markdown' });
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
bot.on('new_chat_members', async (ctx) => {
  try {
    const newMembers = ctx.message.new_chat_members;
    for (const member of newMembers) {
      await ctx.replyWithMarkdown(
        `*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${member.first_name}!*\n\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n1. –ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã\n2. –ù–µ —Ñ–ª—É–¥–∏—Ç—å\n3. –°–æ–±–ª—é–¥–∞—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ`
      );
    }
  } catch (error) {
    console.error('Error greeting new members:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
});

module.exports = async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!process.env.BOT_TOKEN) {
      return res.status(500).json({ 
        error: 'Configuration error',
        message: 'BOT_TOKEN not configured' 
      });
    }

    if (req.method === 'POST') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
      await bot.handleUpdate(req.body);
      res.status(200).json({ ok: true });
    } else {
      // GET –∑–∞–ø—Ä–æ—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
      res.status(200).json({
        status: 'ok',
        message: 'Telegram Bot Webhook is ready',
        method: req.method,
        timestamp: new Date().toISOString(),
        hasToken: !!process.env.BOT_TOKEN,
        nodeEnv: process.env.NODE_ENV || 'development'
      });
    }
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}; 