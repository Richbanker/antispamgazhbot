import { Telegraf } from 'telegraf';
import { config } from './config';
import { setupAntiSpam } from './middlewares/antiSpam';
import { setupCaptcha } from './middlewares/captcha';
import { setupFloodControl } from './middlewares/floodControl';
import { setupAIAntiSpam } from './middlewares/aiAntiSpam';
import { setupAIModeration } from './middlewares/aiModeration';
import { setupModerationCommands } from './commands/moderation';
import { banCommand } from './commands/ban';
import { muteCommand } from './commands/mute';
import { warnCommand } from './commands/warn';
import { unmuteCommand } from './commands/unmute';
import { userService } from './services/userService';
import { rolesCommands } from './commands/roles';
import { roleService } from './roles/roleService';
import { badWordsService } from './services/badWordsService';
import { moderationLogService } from './services/moderationLogService';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN!);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞
async function startBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe
    console.log('üîê Authenticating bot...');
    const botInfo = await bot.telegram.getMe();
    console.log(`‚úÖ Bot authenticated as @${botInfo.username} ‚Üí https://t.me/${botInfo.username}`);
    console.log(`ü§ñ Bot name: ${botInfo.first_name}`);
    console.log(`üÜî Bot ID: ${botInfo.id}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    console.log('üîß Initializing services...');
    console.log(`üìã Bad words loaded: ${badWordsService.getCount()} words`);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware (–Ω–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π middleware –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ)
    setupAIModeration(bot); // –ù–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π middleware
    setupCaptcha(bot);
    setupFloodControl(bot);
    
    // –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    console.log('üìã Registering basic commands...');
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.command('start', async (ctx) => {
      const welcomeMessage = `ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GuardianGazhBot v2.0.0!**

üõ°Ô∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–ø–∞–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –±–∞–Ω–æ–≤
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–ª—É–¥–∞ –∏ –∫–∞–ø—á–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/test_moderation - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞

üëë **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
/badwords - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
/ban, /mute, /warn - –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞

üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã!`;
      
      await ctx.replyWithMarkdown(welcomeMessage);
    });
    
    // –ö–æ–º–∞–Ω–¥–∞ /help
    bot.command('help', async (ctx) => {
      const helpMessage = `üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º GuardianGazhBot**

üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/test_moderation - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏

üëë **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**

üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**
/ban @user [–ø—Ä–∏—á–∏–Ω–∞] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/mute @user [–≤—Ä–µ–º—è] - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
/warn @user [–ø—Ä–∏—á–∏–Ω–∞] - –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unmute @user - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ

üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏:**
/badwords list - —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
/badwords add [—Å–ª–æ–≤–æ] - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
/badwords remove [—Å–ª–æ–≤–æ] - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ

üë• **–†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞:**
/role [@user] - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/promote @user [—Ä–æ–ª—å] - –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
/topusers - —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/report - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç

üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∞:**
–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å –ø—Ä–∞–≤–∞–º–∏:
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

‚ùì –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @your_support_username`;
      
      await ctx.replyWithMarkdown(helpMessage);
    });

    // –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üß™ Registering test command...');
    bot.command('test_moderation', async (ctx) => {
      await ctx.reply('‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –°–∏—Å—Ç–µ–º–∞ v2.0.0 –∞–∫—Ç–∏–≤–Ω–∞.');
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    console.log('üìù Registering moderation commands...');
    try {
      setupModerationCommands(bot); // –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      console.log('‚úÖ Moderation commands registered successfully');
    } catch (error) {
      console.error('‚ùå Error registering moderation commands:', error);
    }
    
    banCommand(bot);
    muteCommand(bot);
    warnCommand(bot);
    unmuteCommand(bot);
    rolesCommands(bot);
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    bot.on('new_chat_members', async (ctx) => {
      try {
        const newMembers = ctx.message.new_chat_members;
        for (const member of newMembers) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await userService.ensureUser(member.id, member.username || '');
          
          console.log(`üëã New member: ${member.username || member.id} joined chat ${ctx.chat.id}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
          await ctx.replyWithMarkdown(
            `*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${member.first_name}!*\n\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n1. –ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã\n2. –ù–µ —Ñ–ª—É–¥–∏—Ç—å\n3. –°–æ–±–ª—é–¥–∞—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ`,
            {
              reply_markup: {
                inline_keyboard: [[{ text: '–Ø –Ω–µ –±–æ—Ç', callback_data: 'captcha_pass' }]]
              }
            }
          );
        }
      } catch (error) {
        console.error('Error greeting new members:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è captcha
    bot.action('captcha_pass', async (ctx) => {
      try {
        await ctx.answerCbQuery('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!');
        await ctx.deleteMessage();
        console.log(`‚úÖ User ${ctx.from?.username || ctx.from?.id} passed captcha`);
      } catch (error) {
        console.error('Error handling captcha:', error);
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.use(async (ctx, next) => {
      try {
        if (ctx.from && !ctx.from.is_bot) {
          await userService.ensureUser(ctx.from.id, ctx.from.username || '');
          if (ctx.message) {
            await userService.incrementMessages(ctx.from.id);
            await roleService.autoPromote(ctx.from.id);
          }
        }
        return next();
      } catch (error) {
        console.error('Error in user middleware:', error);
        return next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    bot.catch(async (err: any, ctx: any) => {
      console.error('üö® Bot error:', err);
      console.error('Update type:', ctx.updateType);
      console.error('Chat ID:', ctx.chat?.id);
      console.error('User ID:', ctx.from?.id);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
      try {
        if (ctx.chat && ctx.reply) {
          await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.');
        }
      } catch (replyError) {
        console.error('Failed to send error message to chat:', replyError);
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    const webhookUrl = process.env.WEBHOOK_URL;
    const port = parseInt(process.env.PORT || '3000');
    
    if (webhookUrl) {
      // Webhook mode –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      console.log('üåê Starting in webhook mode...');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      await bot.telegram.setWebhook(webhookUrl, {
        drop_pending_updates: true, // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        allowed_updates: ['message', 'callback_query', 'chat_member'] // –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
      await bot.launch({
        webhook: {
          domain: webhookUrl,
          port: port,
          hookPath: '/bot' // –ü—É—Ç—å –¥–ª—è webhook
        }
      });
      
      console.log('‚úÖ Bot started successfully!');
      console.log('üì° Mode: Webhook');
      console.log(`üåê Webhook URL: ${webhookUrl}`);
      console.log(`üîå Port: ${port}`);
      console.log(`üìç Webhook path: /bot`);
    } else {
      // Polling mode –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log('üîÑ Starting in polling mode...');
      
      await bot.launch();
      
      console.log('‚úÖ Bot started successfully!');
      console.log('üì° Mode: Long Polling');
    }
    
    console.log('üõë Press Ctrl+C to stop\n');
    
  } catch (error: any) {
    if (error.response?.error_code === 401) {
      console.error('\n‚ùå Invalid token! (401 Unauthorized)');
      console.error('üìã Please check your BOT_TOKEN');
      console.error('üí° Get a new token from @BotFather');
    } else if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
      console.error('\n‚ùå Network error! Cannot connect to Telegram');
      console.error('üì° Check your internet connection');
      console.error('üî• Check if Telegram is blocked in your region');
    } else {
      console.error('\n‚ùå Bot startup failed:', error.message || error);
      console.error('Stack trace:', error.stack);
    }
    
    process.exit(1);
  }
}

// Graceful shutdown
const gracefulShutdown = async (signal: string) => {
  console.log(`\nüõë Received ${signal}, shutting down gracefully...`);
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    bot.stop(signal);
    console.log('‚úÖ Bot stopped gracefully');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error during shutdown:', error);
    process.exit(1);
  }
};

process.once('SIGINT', () => gracefulShutdown('SIGINT'));
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export { bot }; 