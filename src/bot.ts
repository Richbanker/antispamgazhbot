import { Telegraf } from 'telegraf';
import { config } from './config';
import { setupAntiSpam } from './middlewares/antiSpam';
import { setupCaptcha } from './middlewares/captcha';
import { setupFloodControl } from './middlewares/floodControl';
import { setupAIAntiSpam } from './middlewares/aiAntiSpam';
import { banCommand } from './commands/ban';
import { muteCommand } from './commands/mute';
import { warnCommand } from './commands/warn';
import { unmuteCommand } from './commands/unmute';
import { userService } from './services/userService';
import { rolesCommands } from './commands/roles';
import { roleService } from './roles/roleService';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN!);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞
async function startBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe
    console.log('üîê Authenticating bot...');
    const botInfo = await bot.telegram.getMe();
    console.log(`‚úÖ Bot authenticated as @${botInfo.username} ‚Üí https://t.me/${botInfo.username}`);
    console.log(`ü§ñ Bot name: ${botInfo.first_name}`);
    console.log(`üÜî Bot ID: ${botInfo.id}`);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    setupAIAntiSpam(bot);
    setupAntiSpam(bot);
    setupCaptcha(bot);
    setupFloodControl(bot);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    banCommand(bot);
    muteCommand(bot);
    warnCommand(bot);
    unmuteCommand(bot);
    rolesCommands(bot);
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    bot.on('new_chat_members', async (ctx) => {
      try {
        const newMembers = ctx.message.new_chat_members;
        for (const member of newMembers) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await userService.ensureUser(member.id, member.username || '');
          
          console.log(`üëã New member: ${member.username || member.id} joined chat ${ctx.chat.id}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
          await ctx.replyWithMarkdown(
            `*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${member.first_name}!*\n\n–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n1. –ë–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã\n2. –ù–µ —Ñ–ª—É–¥–∏—Ç—å\n3. –°–æ–±–ª—é–¥–∞—Ç—å —É–≤–∞–∂–µ–Ω–∏–µ`,
            {
              reply_markup: {
                inline_keyboard: [[{ text: '–Ø –Ω–µ –±–æ—Ç', callback_data: 'captcha_pass' }]]
              }
            }
          );
        }
      } catch (error) {
        console.error('Error greeting new members:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è captcha
    bot.action('captcha_pass', async (ctx) => {
      try {
        await ctx.answerCbQuery('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!');
        await ctx.deleteMessage();
        console.log(`‚úÖ User ${ctx.from?.username || ctx.from?.id} passed captcha`);
      } catch (error) {
        console.error('Error handling captcha:', error);
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.use(async (ctx, next) => {
      try {
        if (ctx.from && !ctx.from.is_bot) {
          await userService.ensureUser(ctx.from.id, ctx.from.username || '');
          if (ctx.message) {
            await userService.incrementMessages(ctx.from.id);
            await roleService.autoPromote(ctx.from.id);
          }
        }
        return next();
      } catch (error) {
        console.error('Error in user middleware:', error);
        return next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    bot.catch(async (err: any, ctx: any) => {
      console.error('üö® Bot error:', err);
      console.error('Update type:', ctx.updateType);
      console.error('Chat ID:', ctx.chat?.id);
      console.error('User ID:', ctx.from?.id);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
      try {
        if (ctx.chat && ctx.reply) {
          await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.');
        }
      } catch (replyError) {
        console.error('Failed to send error message to chat:', replyError);
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    const webhookUrl = process.env.WEBHOOK_URL;
    const port = parseInt(process.env.PORT || '3000');
    
    if (webhookUrl) {
      // Webhook mode –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      console.log('üåê Starting in webhook mode...');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      await bot.telegram.setWebhook(webhookUrl, {
        drop_pending_updates: true, // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        allowed_updates: ['message', 'callback_query', 'chat_member'] // –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
      await bot.launch({
        webhook: {
          domain: webhookUrl,
          port: port,
          hookPath: '/bot' // –ü—É—Ç—å –¥–ª—è webhook
        }
      });
      
      console.log('‚úÖ Bot started successfully!');
      console.log('üì° Mode: Webhook');
      console.log(`üåê Webhook URL: ${webhookUrl}`);
      console.log(`üîå Port: ${port}`);
      console.log(`üìç Webhook path: /bot`);
    } else {
      // Polling mode –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log('üîÑ Starting in polling mode...');
      
      await bot.launch();
      
      console.log('‚úÖ Bot started successfully!');
      console.log('üì° Mode: Long Polling');
    }
    
    console.log('üõë Press Ctrl+C to stop\n');
    
  } catch (error: any) {
    if (error.response?.error_code === 401) {
      console.error('\n‚ùå Invalid token! (401 Unauthorized)');
      console.error('üìã Please check your BOT_TOKEN');
      console.error('üí° Get a new token from @BotFather');
    } else if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {
      console.error('\n‚ùå Network error! Cannot connect to Telegram');
      console.error('üì° Check your internet connection');
      console.error('üî• Check if Telegram is blocked in your region');
    } else {
      console.error('\n‚ùå Bot startup failed:', error.message || error);
      console.error('Stack trace:', error.stack);
    }
    
    process.exit(1);
  }
}

// Graceful shutdown
const gracefulShutdown = async (signal: string) => {
  console.log(`\nüõë Received ${signal}, shutting down gracefully...`);
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    bot.stop(signal);
    console.log('‚úÖ Bot stopped gracefully');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error during shutdown:', error);
    process.exit(1);
  }
};

process.once('SIGINT', () => gracefulShutdown('SIGINT'));
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export { bot }; 