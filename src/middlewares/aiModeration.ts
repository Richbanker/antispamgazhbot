import { Telegraf, Context } from 'telegraf';
import { badWordsService } from '../services/badWordsService';
import { moderationLogService } from '../services/moderationLogService';
import { userService } from '../services/userService';
import { checkSpamAI } from '../ai/antiSpamAI';

interface ModerationConfig {
  AI_MODERATION: boolean;
  AI_PROVIDER: string;
  AI_API_KEY: string;
  MAX_WARNINGS: number;
  MUTE_DURATION: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

const config: ModerationConfig = {
  AI_MODERATION: process.env.AI_MODERATION === 'true',
  AI_PROVIDER: process.env.AI_PROVIDER || 'openai',
  AI_API_KEY: process.env.AI_API_KEY || '',
  MAX_WARNINGS: parseInt(process.env.MAX_WARNINGS || '3'),
  MUTE_DURATION: parseInt(process.env.MUTE_DURATION || '600'), // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

export function setupAIModeration(bot: Telegraf<Context>) {
  console.log(`üõ°Ô∏è Setting up AI Moderation (AI: ${config.AI_MODERATION ? 'ON' : 'OFF'})`);

  bot.on('message', async (ctx, next) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const text = getMessageText(ctx.message);
      if (!text) {
        return next();
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      if (await isAdmin(ctx)) {
        return next();
      }

      const userId = ctx.from?.id;
      const username = ctx.from?.username || `user_${userId}`;
      const chatId = ctx.chat?.id;

      if (!userId || !chatId) {
        return next();
      }

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      const badWordCheck = badWordsService.checkMessage(text);
      if (badWordCheck.found) {
        await handleViolation(ctx, {
          type: 'bad_word',
          reason: `–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${badWordCheck.word}"`,
          messageText: text,
          userId,
          username,
          chatId
        });
        return; // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      }

      // 2. AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      if (config.AI_MODERATION && config.AI_API_KEY) {
        try {
          const aiResult = await checkSpamAI(text);
          
          if ('isSpam' in aiResult) {
            const { isSpam, confidence, reason } = aiResult;
            
            // –õ–æ–≥–∏—Ä—É–µ–º AI-–∞–Ω–∞–ª–∏–∑
            await moderationLogService.logAction(
              'ai_analysis',
              userId,
              chatId,
              `AI: ${isSpam ? 'spam' : 'clean'} (${Math.round(confidence * 100)}%) - ${reason}`,
              { username, messageText: text, aiConfidence: confidence }
            );

            // –ï—Å–ª–∏ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if (isSpam && confidence >= 0.8) {
              await handleViolation(ctx, {
                type: 'ai_spam',
                reason: `AI: —Å–ø–∞–º (${Math.round(confidence * 100)}%) - ${reason}`,
                messageText: text,
                userId,
                username,
                chatId,
                aiConfidence: confidence
              });
              return;
            }
            
            // –ï—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º
            if (isSpam && confidence >= 0.6) {
              await moderationLogService.logAction(
                'ai_suspicious',
                userId,
                chatId,
                `AI: –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º (${Math.round(confidence * 100)}%) - ${reason}`,
                { username, messageText: text, aiConfidence: confidence }
              );
            }
          }
        } catch (aiError) {
          console.error('‚ùå AI moderation error:', aiError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ AI
        }
      }

      return next();
    } catch (error) {
      console.error('‚ùå Error in AI moderation middleware:', error);
      return next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –º—É—Ç/–±–∞–Ω)
 */
async function handleViolation(ctx: Context, violation: {
  type: string;
  reason: string;
  messageText: string;
  userId: number;
  username: string;
  chatId: number;
  aiConfidence?: number;
}) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.deleteMessage();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    await userService.addWarning(violation.userId);
    const warnings = await userService.getWarnings(violation.userId);

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await moderationLogService.logAction(
      'message_deleted',
      violation.userId,
      violation.chatId,
      violation.reason,
      {
        username: violation.username,
        messageText: violation.messageText,
        aiConfidence: violation.aiConfidence
      }
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if (warnings.count >= config.MAX_WARNINGS) {
      // –ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await muteUser(ctx, violation.userId, violation.username, violation.chatId);
      
      await ctx.reply(
        `üîá <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${violation.username} –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ ${Math.round(config.MUTE_DURATION / 60)} –º–∏–Ω—É—Ç</b>\n` +
        `üìä –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.count}/${config.MAX_WARNINGS}\n` +
        `üö´ –ü—Ä–∏—á–∏–Ω–∞: ${violation.reason}`,
        { parse_mode: 'HTML' }
      );
    } else {
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        `üö´ <b>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n` +
        `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings.count}/${config.MAX_WARNINGS}\n` +
        `üìù –ü—Ä–∏—á–∏–Ω–∞: ${violation.reason}\n\n` +
        `<i>–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ ${config.MAX_WARNINGS} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–µ–Ω.</i>`,
        { parse_mode: 'HTML' }
      );
    }

  } catch (error) {
    console.error('‚ùå Error handling violation:', error);
  }
}

/**
 * –ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function muteUser(ctx: Context, userId: number, username: string, chatId: number) {
  try {
    const until = Math.floor(Date.now() / 1000) + config.MUTE_DURATION;
    
    await ctx.telegram.restrictChatMember(chatId, userId, {
      permissions: {
        can_send_messages: false,
        can_send_audios: false,
        can_send_documents: false,
        can_send_photos: false,
        can_send_videos: false,
        can_send_video_notes: false,
        can_send_voice_notes: false,
        can_send_polls: false,
        can_send_other_messages: false,
        can_add_web_page_previews: false,
        can_change_info: false,
        can_invite_users: false,
        can_pin_messages: false,
        can_manage_topics: false
      },
      until_date: until
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –º—É—Ç
    await moderationLogService.logAction(
      'user_muted',
      userId,
      chatId,
      `–ó–∞–≥–ª—É—à–µ–Ω –Ω–∞ ${config.MUTE_DURATION} —Å–µ–∫—É–Ω–¥ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)`,
      { username }
    );

    console.log(`üîá User ${username} (${userId}) muted for ${config.MUTE_DURATION} seconds`);
  } catch (error) {
    console.error('‚ùå Error muting user:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function getMessageText(message: any): string | null {
  if ('text' in message) {
    return message.text;
  }
  if ('caption' in message) {
    return message.caption;
  }
  return null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
async function isAdmin(ctx: Context): Promise<boolean> {
  try {
    if (!ctx.from || !ctx.chat) return false;
    
    const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
    return ['creator', 'administrator'].includes(member.status);
  } catch (error) {
    return false;
  }
} 