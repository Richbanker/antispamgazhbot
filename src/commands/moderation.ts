import { Telegraf, Context } from 'telegraf';
import { badWordsService } from '../services/badWordsService';
import { moderationLogService } from '../services/moderationLogService';

export function setupModerationCommands(bot: Telegraf<Context>) {
  
  // –ö–æ–º–∞–Ω–¥–∞ /badwords - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
  bot.command('badwords', async (ctx, next) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!(await isAdmin(ctx))) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      const action = args[0];

      switch (action) {
        case 'list':
          await handleListBadWords(ctx);
          break;
        
        case 'add':
          const wordToAdd = args.slice(1).join(' ').trim();
          await handleAddBadWord(ctx, wordToAdd);
          break;
        
        case 'remove':
          const wordToRemove = args.slice(1).join(' ').trim();
          await handleRemoveBadWord(ctx, wordToRemove);
          break;
        
        default:
          await ctx.reply(
            `üõ°Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n` +
            `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
            `‚Ä¢ <code>/badwords list</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤\n` +
            `‚Ä¢ <code>/badwords add [—Å–ª–æ–≤–æ]</code> - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n` +
            `‚Ä¢ <code>/badwords remove [—Å–ª–æ–≤–æ]</code> - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n\n` +
            `<b>–í—Å–µ–≥–æ —Å–ª–æ–≤:</b> ${badWordsService.getCount()}`,
            { parse_mode: 'HTML' }
          );
          break;
      }
    } catch (error) {
      console.error('‚ùå Error in badwords command:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /modlog - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  bot.command('modlog', async (ctx, next) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!(await isAdmin(ctx))) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      const limit = parseInt(args[0]) || 10;
      
      await handleModerationLog(ctx, Math.min(limit, 20)); // –ú–∞–∫—Å–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π
    } catch (error) {
      console.error('‚ùå Error in modlog command:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /modstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  bot.command('modstats', async (ctx, next) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!(await isAdmin(ctx))) {
        await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
        return;
      }

      const args = ctx.message.text.split(' ').slice(1);
      const days = parseInt(args[0]) || 7;
      
      await handleModerationStats(ctx, Math.min(days, 30)); // –ú–∞–∫—Å–∏–º—É–º 30 –¥–Ω–µ–π
    } catch (error) {
      console.error('‚ùå Error in modstats command:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async function handleListBadWords(ctx: Context) {
  const words = badWordsService.getAllWords();
  
  if (words.length === 0) {
    await ctx.reply('üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.');
    return;
  }

  const chunks = [];
  const wordsPerChunk = 30;
  
  for (let i = 0; i < words.length; i += wordsPerChunk) {
    const chunk = words.slice(i, i + wordsPerChunk);
    chunks.push(chunk);
  }

  for (let i = 0; i < chunks.length; i++) {
    const wordsList = chunks[i]
      .map((word, index) => `${i * wordsPerChunk + index + 1}. <code>${word}</code>`)
      .join('\n');

    const message = 
      `üö´ <b>–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ ${i > 0 ? `(—á–∞—Å—Ç—å ${i + 1})` : ''}</b>\n\n` +
      wordsList +
      `\n\n<b>–í—Å–µ–≥–æ:</b> ${words.length} —Å–ª–æ–≤`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  }
}

async function handleAddBadWord(ctx: Context, word: string) {
  if (!word) {
    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: <code>/badwords add —Å–ø–∞–º</code>', { parse_mode: 'HTML' });
    return;
  }

  const added = badWordsService.addWord(word);
  
  if (added) {
    await ctx.reply(
      `‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n` +
      `üö´ –ù–æ–≤–æ–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <code>${word}</code>\n` +
      `üìä –í—Å–µ–≥–æ —Å–ª–æ–≤: ${badWordsService.getCount()}`,
      { parse_mode: 'HTML' }
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const chatId = ctx.chat?.id;
    const userId = ctx.from?.id;
    if (chatId && userId) {
      await moderationLogService.logAction(
        'badword_added',
        userId,
        chatId,
        `–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${word}"`,
        { username: ctx.from?.username }
      );
    }
  } else {
    await ctx.reply(
      `‚ö†Ô∏è <b>–°–ª–æ–≤–æ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ!</b>\n\n` +
      `üö´ –°–ª–æ–≤–æ "<code>${word}</code>" —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.`,
      { parse_mode: 'HTML' }
    );
  }
}

async function handleRemoveBadWord(ctx: Context, word: string) {
  if (!word) {
    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: <code>/badwords remove —Å–ø–∞–º</code>', { parse_mode: 'HTML' });
    return;
  }

  const removed = badWordsService.removeWord(word);
  
  if (removed) {
    await ctx.reply(
      `‚úÖ <b>–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!</b>\n\n` +
      `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <code>${word}</code>\n` +
      `üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: ${badWordsService.getCount()}`,
      { parse_mode: 'HTML' }
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const chatId = ctx.chat?.id;
    const userId = ctx.from?.id;
    if (chatId && userId) {
      await moderationLogService.logAction(
        'badword_removed',
        userId,
        chatId,
        `–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: "${word}"`,
        { username: ctx.from?.username }
      );
    }
  } else {
    await ctx.reply(
      `‚ö†Ô∏è <b>–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n\n` +
      `üîç –°–ª–æ–≤–æ "<code>${word}</code>" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/badwords list</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.`,
      { parse_mode: 'HTML' }
    );
  }
}

async function handleModerationLog(ctx: Context, limit: number) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  const logs = await moderationLogService.getRecentLogs(limit, chatId);
  
  if (logs.length === 0) {
    await ctx.reply('üìã –õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç—ã.');
    return;
  }

  let message = `üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${logs.length} –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n`;

  for (const log of logs) {
    const date = new Date(log.timestamp).toLocaleString('ru-RU');
    const username = log.username ? `@${log.username}` : `ID:${log.userId}`;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏
    const actionEmoji = getActionEmoji(log.action);
    
    message += `${actionEmoji} <b>${formatAction(log.action)}</b>\n`;
    message += `üë§ ${username}\n`;
    message += `üìÖ ${date}\n`;
    message += `üìù ${log.reason}\n`;
    
    if (log.aiConfidence) {
      message += `ü§ñ AI: ${Math.round(log.aiConfidence * 100)}%\n`;
    }
    
    message += '\n';
  }

  message += `üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ</i> <code>/modlog [—á–∏—Å–ª–æ]</code> <i>–¥–ª—è –ø–æ–∫–∞–∑–∞ –¥—Ä—É–≥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π</i>`;

  await ctx.reply(message, { parse_mode: 'HTML' });
}

async function handleModerationStats(ctx: Context, days: number) {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  const stats = await moderationLogService.getModerationStats(days, chatId);
  
  let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞ ${days} –¥–Ω–µ–π</b>\n\n`;
  
  message += `üî¢ <b>–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π:</b> ${stats.totalActions}\n\n`;
  
  if (Object.keys(stats.actionBreakdown).length > 0) {
    message += `üìã <b>–ü–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π:</b>\n`;
    for (const [action, count] of Object.entries(stats.actionBreakdown)) {
      const emoji = getActionEmoji(action);
      message += `${emoji} ${formatAction(action)}: ${count}\n`;
    }
    message += '\n';
  }
  
  if (stats.topReasons.length > 0) {
    message += `üèÜ <b>–¢–æ–ø –ø—Ä–∏—á–∏–Ω:</b>\n`;
    for (let i = 0; i < Math.min(5, stats.topReasons.length); i++) {
      const reason = stats.topReasons[i];
      message += `${i + 1}. ${reason.reason} (${reason.count})\n`;
    }
  }

  await ctx.reply(message, { parse_mode: 'HTML' });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getActionEmoji(action: string): string {
  const emojiMap: Record<string, string> = {
    'message_deleted': 'üóëÔ∏è',
    'user_muted': 'üîá',
    'user_banned': 'üö´',
    'ai_analysis': 'ü§ñ',
    'ai_suspicious': 'üîç',
    'badword_added': '‚ûï',
    'badword_removed': '‚ûñ',
    'warning_added': '‚ö†Ô∏è'
  };
  
  return emojiMap[action] || 'üìù';
}

function formatAction(action: string): string {
  const actionMap: Record<string, string> = {
    'message_deleted': '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
    'user_muted': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω',
    'user_banned': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω',
    'ai_analysis': 'AI –∞–Ω–∞–ª–∏–∑',
    'ai_suspicious': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    'badword_added': '–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
    'badword_removed': '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ',
    'warning_added': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ'
  };
  
  return actionMap[action] || action;
}

async function isAdmin(ctx: Context): Promise<boolean> {
  try {
    if (!ctx.from || !ctx.chat) return false;
    
    const member = await ctx.telegram.getChatMember(ctx.chat.id, ctx.from.id);
    return ['creator', 'administrator'].includes(member.status);
  } catch (error) {
    return false;
  }
} 